{"slots":{"0":{"name":"screen_face","type":{"events":[],"methods":[]}},"1":{"name":"screen_menu","type":{"events":[],"methods":[]}},"2":{"name":"databank","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"mO = screen2.getScriptOutput()","filter":{"args":[{"variable":"*"}],"signature":"onOutputChanged(output)","slotKey":"1"},"key":"0"},{"code":"-- Project BotMind by StarZet\n-- Bring more life in Dual Universe!\n\nunit.setTimer(\"t\",0.03)-- 33 per sec\nunit.hideWidget()\n\nfunction tN(s)\n    return tonumber(s)\nend\nfunction sin(d)\n    return math.sin(math.rad(d))\nend\nfunction uc90(d)\n    return utils.clamp(d,-90,90)\nend\n--table concatination\nfunction tC(t1,t2)\n    for i=1,#t2 do\n        t1[#t1+1] = t2[i]\n    end\n    return t1\nend\nfunction mysplit(inputstr, sep)\n   if sep == nil then\n      sep = \"%s\"\n   end\n   local t={}\n   for str in string.gmatch(inputstr, \"([^\"..sep..\"]+)\") do\n      table.insert(t, str)\n   end\n   return t\nend\n\nfunction cV(cN,name)--checkValid\n    if type(tN(cN[1]))==\"number\"\n        and type(tN(cN[2]))==\"number\"\n        and type(tN(cN[3]))==\"number\" then\n    else\n        errorM = errorM..name..\" wrong format; \"\n    end\nend\n\nerrorM = ''\nuseMenuScreen = true --export:Turn it off if you want to use only HUD for interact.\nscreen = screen_face\nif not screen.getClass():find(\"ScreenUnit\")then\n    errorM = \"need screen_face, have: \"..screen.getClass()..\"; \"\nend\nscreen2 = screen_menu\nif useMenuScreen then\n    if not screen2.getClass():find(\"ScreenUnit\") then\n        errorM = errorM..\"need screen_menu, have: \"..screen2.getClass()..\"; \"\n    end\nend\ndb = databank\nif not db.getClass():find(\"DataBankUnit\")then\n    errorM = errorM..\"need databank, have: \"..screen2.getClass()..\"; \"\nend\n\nfaceStrokeColour = \"0.710,0.878,0.941\" --export:As one String, values from 0 to 1 in format \"r,g,b\" default is \"0.710,0.878,0.941\"\ncF = mysplit(faceStrokeColour,\",\")\ncV(cF,\"faceStrokeColour\")\ncolorMain = \"0.710,0.878,0.941\" --export:look \"faceStrokeColour\"\ncM = mysplit(colorMain,\",\")\ncV(cM,\"colorMain\")\ntextColor = \"0.710,0.878,0.941\" --export:look \"faceStrokeColour\"\ncT = mysplit(textColor,\",\")\ncV(cM,\"textColor\")\nif errorM ~= '' then\n    system.print(errorM)\n    unit.exit()\nend\n\ncSelfWas = vec3{}\nnPt = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'\ntL,tR,tP = 0,0,0\nfExpr = {} -- faceExpression\nfE = ''\nfR = ''\nfRState = false\naShift = {}\naType = 0\naLen = 0\naTLim = 0\naSeq = {}\ninput = ''\nvariants = {{1,'',{''},{1}}}\nvAdd = {}\nvAddNeed = {}\ntxtVariants = {''}\nfNameI = ''\nfNameIState = false\nfStep = 1\nlNext = {vec3(),0,0,0}\nlLast = {vec3(),0,0,0}\nlTarget = \"player\"\nlAType = 0\nlALen = 0\nlATLim = 0\nidle = true\niT = {0,0,0}\n\ndirN = 1\ndirNMax = 38\ndirPrint = ''\n-- params on first launch\nvariantsNeed = {1,2,3,4}\nvariantNow = 1\nanswerText = \"Hello world!\\nI have HUD, just manually activate the second program board.\"\n\n-- The actual mind. It's a table of variants, each of them have some parts\n--    variants = { {id,string,{string,string,...},{id,id,...}},\n--                 {nextVariant},\n--                 ... }\n--    Each variant:\n--    [1] Id of the variant (can be a string)\n--    [2] Text of your speach in console\n--    [3] tablet of Reactions when press Enter,\n--        all reactions happend in pressEnter() function\n--        reaction is \"trigger_parammeter\" example = \"answer_Hi\"\n--        (yes you need create that triggers function and add a new \"if\" in pressEnter())\n--    [4] tablet of the next visible variants (next Ids) sorted as it is\n--        also can be not tablet, but one string: \"last\" to avoid copypaste of same menu\nfunction setVariants()\nvariants = {\n    {1,\"Who are you?\",\n        {\"answer_I\\'m bot, or NPC system.\",\"aSeq_speak\"},\n        {1,2,3,4}},\n    {2,\"What you can do?\",\n        {\"answer_I can do many things, limited only by game programming abilities.\",\"aSeq_speak\",\"idleF\",\"lookAt_0.2,player\"},\n        {9,\"aN\",\"lA\",10}},\n    {3,\"Who created you?\",\n        {\"vNext_3\",\"answer_I\\'m created by StarZet, more info on github.com/Star-Zet/bot-mind\",\"aSeq_speak\"},\n        {1,2,3,4}},\n    {4,\"-Exit-\",\n        {\"exit\"},\n        {1}},\n    fSL={\"fSL\",\"save/load\",\n        {\"fNIS\",\"answer_Enter Name in LUA CHAT (only [A..Z] [a..z] [0..9] symbols)\\nName=\\\"\"..fNameI..\"\\\" (direct\"..dirPrint..\")\"},\n        {\"fR\",\"fS\",\"fL\",\"fD\",\"fSA\",\"fB\"}},\n    fR={\"fR\",\"Reset name\",\n        {\"fR\",\"aRefresh_fSL\"},\n        \"last\"},\n    fS={\"fS\",\"Save\",\n        {\"faceSLD_s\"},\n        \"last\"},\n    fL={\"fL\",\"Load\",\n        {\"faceSLD_l\"},\n        \"last\"},\n    fD={\"fD\",\"Delete\",\n        {\"faceSLD_d\"},\n        \"last\"},\n    fSA={\"fSA\",\"-Show all saved-\",\n        {\"fSA\"},\n        tC({\"fB2\"},vAddNeed)},\n    fB={\"fB\",\"-back-\",\n        {\"aRefresh_9\"},\n        {\"fST1\",\"fST2\",5,6,7,8,\"fSL\",10}},\n    fB2={\"fB2\",\"-back-\",\n        {\"aRefresh_fSL\",\"fSAD\"},\n        {\"fR\",\"fS\",\"fL\",\"fD\",\"fSA\",\"fB\"}},\n    fST1={\"fST1\",\"step +0.1\",\n        {\"fST_0.1\"},\n        \"last\"},\n    fST2={\"fST2\",\"step -0.1\",\n        {\"vNext_2\",\"fST_-0.1\"},\n        \"last\"},\n    {5,\"face +\"..fStep,\n        {\"vNext_3\",\"face_plus,direct,\"..dirN..\"#\"..fStep,\"answer_dirN \"..dirN..' '..dirPrint},\n        \"last\"},\n    {6,\"face \"..-fStep,\n        {\"vNext_4\",\"face_plus,direct,\"..dirN..\"#\"..-fStep,\"answer_dirN \"..dirN..' '..dirPrint},\n        \"last\"},\n    {7,\"direct +1\",\n        {\"vNext_5\",\"dirN+\",\"answer_dirN \"..dirN..' '..dirPrint},\n        \"last\"},\n    {8,\"direct -1\",\n        {\"vNext_6\",\"dirN-\",\"answer_dirN \"..dirN..' '..dirPrint},\n        \"last\"},\n    {9,\"-Face Redactor-\",\n        {\"fRedactor\",\"answer_Here you can modify face to desired expression. (check -face- function)\",\"face_none\"},\n        {\"fST1\",\"fST2\",5,6,7,8,\"fSL\",10}},\n    {10,\"-Main menu-\",\n        {\"fScript\",\"answer_-Main menu-\",\"anim_0.3,Default\",\"idleT\"},\n        {1,2,3,4}},\n    aN={\"aN\",\"-Animation-\",\n        {\"answer_Here are some examples of animations.\",\"aSeq_speak\"},\n        {\"aN1\",\"aN3\",\"aS\",\"aS1\",10}},\n    aN1={\"aN1\",\"anim O\",\n        {\"anim_0.6,O\"},\n        {\"aN2\",\"aN4\",\"aS\",\"aS1\",10}},\n    aN2={\"aN2\",\"anim def\",\n        {\"anim_0.6,Default\"},\n        {\"aN1\",\"aN3\",\"aS\",\"aS1\",10}},\n    aN3={\"aN3\",\"anim O sin^3\",\n        {\"vNext_2\",\"anim_0.6,3,O\"},\n        {\"aN2\",\"aN4\",\"aS\",\"aS1\",10}},\n    aN4={\"aN4\",\"anim def sin^3\",\n        {\"vNext_2\",\"anim_0.6,3,Default\"},\n        {\"aN1\",\"aN3\",\"aS\",\"aS1\",10}},\n    aS={\"aS\",\"aSequence speak\",\n        {\"vNext_3\",\"aSeq_speak\"},\n        \"last\"},\n    aS1={\"aS1\",\"aSequence blink\",\n        {\"vNext_4\",\"aSeq_blink\"},\n        \"last\"},\n    lA={\"lA\",\"-Look At-\",\n        {\"answer_Here are some examples of changing the look.\",\"aSeq_speak\"},\n        {\"lA1\",\"lA2\",\"lA3\",\"lA4\",10}},\n    lA1={\"lA1\",\"lookAt \\\"player\\\"\",\n        {\"lookAt_0.5,player\"},\n        \"last\"},\n    lA2={\"lA2\",\"lookAt ::pos\",\n        {\"vNext_2\",\"lookAt_0.5,::pos{0,2,42.7830,111.2410,96.9404}\"},\n        \"last\"},\n    lA3={\"lA3\",\"lookAt nose\",\n        {\"vNext_3\",\"lookAt_0.5,-70,70,45\"},\n        \"last\"},\n    lA4={\"lA4\",\"lookAt vec3{1,2,3}\",\n        {\"vNext_4\",\"lookAt_0.5,vec3{1,2,3}\"},\n        \"last\"},\n}\n    for k,v in pairs(vAdd) do\n        variants[k] = v\n    end\nend\nsetVariants()\n\nfor n,varN in ipairs(variantsNeed) do\n    txtVariants[n] = variants[varN][2]\nend\n\nmO = \"start\"\ntrigTime = 0\n\n-- (vectorTo) return yawEyeL,yawEyeR, pitch\nfunction getDegrees(dTo)\n    local eU = vec3(screen.getWorldUp())\n    local eF = vec3(screen.getWorldForward())\n    local eR = vec3(screen.getWorldRight())\n    cSelf = vec3(construct.getWorldPosition())\n    ewpL = vec3(eyeWorldPosition(screen,posLE))\n    ewpR = vec3(eyeWorldPosition(screen,posRE))\n    vDestToL = vec3(vec3( dTo ) - ewpL):normalize_inplace()\n    vDestToR = vec3(vec3( dTo ) - ewpR):normalize_inplace()\n    return uc90(getRoll(vDestToL, eU, eR)), uc90(getRoll(vDestToR, eU, eR)), uc90(getRoll(vDestToL, eR,-eU))\nend\n\n-- (vectorTo) or\n-- (yawDegL,yawDegR,pitchDeg)\nfunction setLook(p1,p2,p3)\n    local yL,yR,p = 0,0,0\n    if p2 and p3 then\n        yL,yR,p = p1,p2,p3\n    else\n        yL,yR,p = getDegrees(p1)\n        if lALen == 0 then\n            lLast = {p1,yL,yR,p}\n        end\n    end\n    tL = 4*sin(yL)\n    tR = 4*sin(yR)\n    tP = 2*sin(p)\nend\n\n-- () no variables = just refresh current answer;\n-- (variantXId) set selected answer;\n-- (vX, additionalText) set selected + additional text;\nfunction refreshAnswer(vX,addT)\n    local id = variantsNeed[variantNow]\n    if vX ~= nil then\n        if tN(vX) then\n            vX = tN(vX)\n        end\n        id = vX\n    end\n    setVariants()\n    for n=1, #variants[id][3] do\n        local sp = mysplit(variants[id][3][n],\"_\")\n        if sp[1] == \"answer\" then answerText = sp[2]..(addT or '') end\n    end\n    getInput()\nend\n\nfunction getInput()\n    inputColors = cM[1]..\"@@\"..cM[2]..\"@@\"..cM[3]..\"@@\"..cT[1]..\"@@\"..cT[2]..\"@@\"..cT[3]\n    if answerText == \"\" then\n        answerText = \" \"\n    end\n    input = inputColors ..\"@@\".. answerText..\"@@\".. variantNow\n    for _,textN in ipairs(txtVariants) do\n        if textN == \"\" then\n            textN = \" \"\n        end\n        input = input..\"@@\".. textN\n    end\n    db.setStringValue(\"input\",input)\n    if useMenuScreen then\n        screen2.setScriptInput(input)\n    end\n    db.setStringValue(\"ms\",\"mO\")\nend\n\nfunction setFR()\n    dirN = utils.clamp(dirN,1,dirNMax)\n    local x,y,s = 0,0,{0,-9,10,-17,18,-9,0,-9,8,-17,18,-9,0,0,11,-18,9,16,18,2,0,2,7,-18,9,16,18,0,41,70,50,70,50,70,59,70,9,9}\n    if dirN == 37 then\n        fR = \"0,0,1,\".. Lx+s[dirN] ..','.. Ly\n    elseif dirN == 38 then\n        fR = \"0,0,1,\".. Rx+s[dirN] ..','.. Ry\n    else\n        if dirN >=1 and dirN <=6 or dirN >=13 and dirN <=20 then\n            x,y = Lx,Ly\n        end\n        if dirN >=7 and dirN <=12 or dirN >=21 and dirN <=28 then\n            x,y = Rx,Ry\n        end\n        if math.fmod(dirN,2) == 0 then\n            fR = \"0,1,0,\"..x + s[dirN -1] +fExpr[dirN -1]..','..y + s[dirN] +fExpr[dirN]\n        else\n            fR = \"1,0,0,\"..x + s[dirN] +fExpr[dirN]..','..y + s[dirN +1] +fExpr[dirN +1]\n        end\n    end\nend\n-- Func for prebaked face\n-- requaire: can be like 'direct' (\"id#num,id#num,...\") or (\"num,num,num,num,...\",shift)\nfunction setDirect(str,shift)\n    local d,sh = {},0\n    if shift ~= nil then\n        sh = shift\n    end\n    for i=1,dirNMax do d[i]=0 end\n    local s = mysplit(str,',')\n    for i, pN in ipairs(s) do\n        if sh ~= 0 then\n            d[i+sh] = tN(pN)\n        else\n            local dr = mysplit(pN,'#')\n            d[tN(dr[1])] = tN(dr[2])\n        end\n    end\n    return d\nend\n\n-- Function to set custom expressoins to default face, trigger \"face\"\n-- params can be:\n--  \"plus\" state, means changes will be add to existed face expression\n--  prebaked such as \"Default\" or \"O\"\n--  \"direct\" custom move of one dot , require \"id#num\"\n-- Examples:\n-- \"Default\"\n-- \"O\"\n-- \"direct,21#-1,14#5.1,1#0.91\"\n-- \"plus,direct,3#-1,9#-1\"\nfunction face(params)\n    -- OFFSETS, each controls 4 parts X and Y (total 8 nums):\n    -- CornerLeft X,Y; Top X,Y; Buttom X,Y; CornerRight X,Y\n    -- (brows has 3 parts CornerLeft X,Y; Center X,Y; CornerRight X,Y)\n    -- browL = {0,0,0,0,0,0}    -- 1...6\n    -- browR = {0,0,0,0,0,0}    -- 7...12\n    -- eyeL = {0,0,0,0,0,0,0,0} -- 13...20\n    -- eyeR = {0,0,0,0,0,0,0,0} -- 21...28\n    -- mouth = {0,0,0,0,0,0,0,0}-- 29...36\n    -- pupilRadiusLR = {0,0}    -- 37,38\n    \n    local now,directs,plus = '',{},false\n    for i=1,dirNMax do directs[i]=0 end\n    local p = mysplit(params,',')\n    for i, pN in ipairs(p) do\n        if not tN(pN) then\n            if db.hasKey(\"face_\"..pN) == 1 then -- check for prebaked expressions\n                directs = setDirect(db.getStringValue(\"face_\"..pN))\n            end\n        end\n        if now == \"direct\" then\n            local dr = mysplit(pN,'#')\n            if tN(dr[1])then\n                directs[tN(dr[1])] = tN(dr[2])\n            else\n                now = ''\n            end\n        end\n        if pN == \"plus\" then      plus = true      end\n        if pN == \"direct\" then    now = \"direct\"   end\n    end\n    if not plus or #fExpr==0 then\n        for i=1,dirNMax do fExpr[i]=0 end\n    end\n    for i,dN in pairs(directs) do\n        if plus then\n            fExpr[i] = fExpr[i] + dN\n        else\n            fExpr[i] = dN\n        end\n    end\nend\n\nfunction setFE(expr)\n    fE = ''\n    dirPrint=''\n    for i, n in ipairs(expr) do\n        if n ~= 0 then\n            if dirPrint=='' then\n                dirPrint = i..'#'..n\n            else\n                dirPrint = dirPrint..','..i..'#'..n\n            end\n        end\n        if fE == '' then\n            fE = n\n        else\n            fE = fE..','..n\n        end\n    end\nend\n\nfunction setFace(p)\n    face(p)\n    setFE(fExpr)\n    if fRState then setFR() end\nend\n\n-- (\"s\") (\"l\") (\"d\") (\"s\", name, \"32#1,34#1\")\nfunction faceSLD(n,fN,dVal)\n    local key = \"face_\"..fNameI\n    local dP = dirPrint\n    if fN ~= nil and dVal ~= nil then\n        key = \"face_\"..fN\n        dP = dVal\n    else\n        if fNameI == '' then \n            n = 'd'\n        end\n    end\n    \n    local str = ''\n    if n=='s'then str=\"Saved\"    ; db.setStringValue(key,dP) end\n    if n=='l'then str=\"Loaded\"   end\n    if fN == nil and dVal == nil then\n        local val = db.getStringValue(key)\n        if db.hasKey(key) == 1 then\n            if n=='d'then str=\"Deleted\"  ; db.clearValue(key) end\n            answerText = str..\" key: \\\"\"..key..\"\\\"\\n value: \\\"\"..val..\"\\\"\"\n        else\n            answerText = \"No such key\"\n        end\n    end\nend\n\n-- Here is prebaked faces\nfaceSLD('s',\"none\",\"\")\nfaceSLD('s',\"Default\",\"32#10,34#10\")\nfaceSLD('s','O',\"29#3,32#-8,34#10,35#-3\")\nfaceSLD('s','i',\"29#-2,34#9,35#1\")\nfaceSLD('s','o',\"29#5,32#-11,34#14,35#-5\")\nfaceSLD('s','u',\"29#6,32#-8,34#10,35#-6\")\nfaceSLD('s','a',\"29#1,32#-14,34#17,35#-1\")\nfaceSLD('s','m',\"29#2,30#1,34#-3,35#-2,36#1\")\nfaceSLD('s','U',\"29#4,30#-4,32#-4,34#11,35#-5,36#-4\")\nfaceSLD('s',\"blink\",\"2#1,4#2,10#2,12#1,16#21,18#-12,24#21,26#-12\")\n\nsetFace(\"Default\")\n\n-- Func to set animation, requaire one string:\n-- (animLenInSec..\",\"..faceParams) or\n-- (animLenInSec..\",\"..animType..\",\"..faceParams)\n-- animType: means sin degree (sin()^animType), \"1\" \"2\"...\"n\", default is linear animation\n-- examples: \"0.5,Default\"    \"1.9,O\"    \"2,direct,37#3,38#3\"\n--           \"0.4,3,O\"    \"1.5,4,direct,37#3,38#3\"\nfunction setAnim(p)\n    local spl,fState,fP = mysplit(p,','),false,''\n    aType = 0\n    for i,pN in ipairs(spl) do\n        if i==1 then\n            aLen = tN(pN)\n        else\n            if i==2 and tN(pN) then\n                aType = tN(pN)\n            else\n                fState = true\n            end\n        end\n        if fState then\n            fP = fP..','..pN\n        end\n    end\n    local fWas = {}\n    for i,dN in pairs(fExpr) do\n        fWas[i] = fExpr[i]\n    end\n    face(fP)\n    for i, pN in ipairs(fExpr) do\n        aShift[i] = pN - fWas[i]\n    end\n    aTLim = system.getArkTime() + aLen\nend\n\n-- none, will use first anim in sequence\n-- or single string ';' separated params for setAnim(p)    \"1,2,Default;0.3,a;1,10,i\"\n-- or for save prebaked (\"params for setAnim\",'s',\"name\")  (\"1,o;1,i;1,a;0.5,6,i\",'s',\"speak\")\nfunction animSequence(p,s,k)\n    if type(p) == \"string\" then\n        aSeq = {}\n        if s == 's' and k ~= nil then\n            db.setStringValue(\"aSeq_\"..k,p)\n        else\n            p = mysplit(p,';')\n            for i,pN in ipairs(p) do\n                if db.hasKey(\"aSeq_\"..pN) == 1 then\n                    local seq =mysplit(db.getStringValue(\"aSeq_\"..pN),';')\n                    aSeq = tC(aSeq,seq)\n                    if pN== \"speak\" then\n                        for i=1, #answerText/13 do\n                            aSeq = tC(aSeq,seq)\n                        end\n                        aSeq[#aSeq] = \"0.1,Default\"\n                    end\n                else\n                    aSeq[i] = pN\n                end\n            end\n        end\n    end\n    if #aSeq ~= 0 then\n        setAnim(table.remove(aSeq,1))\n    end\nend\n\n-- prebaked\nanimSequence(\"0.1,Default;0.1,plus,blink;0.05,plus,none;0.1,Default\",'s',\"blink\")\nanimSequence(\"0.1,i;0.1,o;0.1,u;0.1,a;0.1,O;0.1,m\",'s',\"speak\")\n\nfunction animRefresh()\n    local t = system.getArkTime()\n    if t < aTLim then\n        local m,fA = 1,{}\n        m = (aTLim - t) / aLen\n        if aType > 0 then\n            m = sin(90*m)^aType\n        end\n        for i,pN in ipairs(fExpr) do\n            fA[i] = pN - aShift[i] * m\n        end\n        setFE(fA)\n    else\n        setFE(fExpr)\n        aLen = 0\n    end\nend\n\nfunction lookRefresh()\n    local t = system.getArkTime()\n    if t < lATLim then\n        local m,fA = 1,{}\n        m = (lATLim - t) / lALen\n        if lAType > 0 then\n            m = sin(90*m)^lAType\n        end\n        pL = lNext[2] + (lLast[2] - lNext[2]) *m\n        pR = lNext[3] + (lLast[3] - lNext[3]) *m\n        pP = lNext[4] + (lLast[4] - lNext[4]) *m\n        setLook(pL,pR,pP)\n        lLast[\"m\"] = {pL,pR,pP}\n    else\n        lALen = 0\n    end\nend\n\n-- Input (one string) can be:\n--    \"duration,player\"             \"1, player\"\n-- or \"d,any ::pos String\"          \"0.5, ::pos{0,0,1,1,1}\"\n-- or \"d,vec3\"                      \"2, vec3{2,3,4}\"\n-- or \"d,yawDegL,yawDegR,pitchDeg\"  \"1.1, 10, -11, 20\" - manual turn of eyes\nfunction lookAt(str)\n    if lLast[\"m\"] ~= nil then\n        local m = lLast[\"m\"]\n        lLast[2],lLast[3],lLast[4] = m[1],m[2],m[3]\n    end\n    local vec,p1,p2,p3,p4 = vec3(),'','','',''\n    p1,p2 = string.match(str,nPt..','..\"(.*)\")\n    p1 = tN(p1)\n    if p2 == \"player\" then\n        vec = vec3(player.getWorldHeadPosition())\n        lTarget = \"player\"\n    else\n        if p2:find(\"::pos\") then\n            vec = cToWC(p2) -- convert any pos to world coords\n            lTarget = \"pos\"\n        else\n            if p2:find(\"vec3\") then\n                p2,p3,p4 = string.match(p2,\"vec3{\"..nPt..','..nPt..','..nPt..'}')\n                vec = vec3(p2,p3,p4)\n                lTarget = \"vec3\"\n            else\n                p2,p3,p4 = string.match(p2,nPt..','..nPt..','..nPt)\n                if p2 and p3 and p4 then\n                    lNext = {vec,uc90(tN(p2)),uc90(tN(p3)),uc90(tN(p4))}\n                    lTarget = \"manual\"\n                end\n            end\n        end\n    end\n    if lTarget ~= \"manual\" then\n        lNext = {vec,getDegrees(vec)}\n    end\n    lATLim = system.getArkTime() + p1\n    lAType = 7\n    lALen = p1\nend\n\nfunction faceShowAll(del)\n    vAddNeed = {}\n    local i = 1\n    for _,k in ipairs(db.getKeyList()) do\n        if k:find(\"face_\") then\n            if del ~= nil then\n                vAdd[k] = nil\n            else\n                i = i +1\n                local sp = mysplit(k,'_')\n                vAdd[k] = {k,sp[2],{\"vNext_\"..i,\"face_\"..sp[2],\"setFNI\",\"faceSLD_l\"},\"last\"}\n                vAddNeed[#vAddNeed +1] = k\n            end\n        end\n    end\nend\n\nfunction pressEnter()\n    local variantNext = 1\n    local vN = variants[variantsNeed[variantNow]]\n    for n=1, #vN[3] do -- reactions\n        setVariants()\n        local rN = variants[variantsNeed[variantNow]][3][n]\n        local sp = mysplit(rN,\"_\")\n        if sp[1] == \"answer\" then answerText = sp[2] end\n        if sp[1] == \"exit\" then unit.exit() end\n        if sp[1] == \"vNext\" then variantNext = tN(sp[2]) end\n        if sp[1] == \"face\" then aSeq={}; aLen=0; setFace(sp[2]) end\n        if sp[1] == \"dirN+\" then dirN = dirN +1; setFR() end\n        if sp[1] == \"dirN-\" then dirN = dirN -1; setFR() end\n        if sp[1] == \"fRedactor\" then screen.setRenderScript(script..fRS)\n            fRState =true; setFR()\n        end\n        if sp[1] == \"fScript\" then screen.setRenderScript(script);\n            fRState =false; fNameIState = false\n        end\n        if sp[1] == \"anim\" then aSeq={}; setAnim(sp[2]) end\n        if sp[1] == \"fNIS\" then fNameIState = true end\n        if sp[1] == \"fR\" then fNameI = '' end\n        if sp[1] == \"faceSLD\" then faceSLD(sp[2]) end\n        if sp[1] == \"aRefresh\" then refreshAnswer(sp[2]) end\n        if sp[1] == \"fSA\" then faceShowAll() end\n        if sp[1] == \"fSAD\" then faceShowAll(\"del\") end\n        if sp[1] == \"fST\" then fStep = utils.clamp(fStep + tN(sp[2]),0.1,10) end\n        if sp[1] == \"setFNI\" then fNameI = vN[2] end\n        if sp[1] == \"lookAt\" then lookAt(sp[2]) end\n        if sp[1] == \"aSeq\" then animSequence(sp[2]) end\n        if sp[1] == \"idleF\" then idle = false end\n        if sp[1] == \"idleT\" then idle = true end\n    end\n    setVariants()\n    local vsN = variants[variantsNeed[variantNow]][4]\n    if vsN ~= \"last\" then\n        variantsNeed = vsN\n    end\n    txtVariants = {}\n    for n,varN in ipairs(variantsNeed) do\n        txtVariants[n] = variants[varN][2]\n    end\n    variantNow = variantNext\n    scroll(0)\nend\n\nfunction scroll(dir)\n    if dir < 0 then\n        if variantNow > 1 then\n            variantNow = variantNow - 1\n            else\n            variantNow = #variantsNeed\n        end\n    end\n    if dir > 0 then\n        if variantNow < #variantsNeed then\n            variantNow = variantNow + 1\n            else\n            variantNow = 1\n        end\n    end\nend\n\nfunction sG(s,p,r)\n    return string.gsub(s,p,r)\nend\nfunction decompress(f)\n    f = sG(f, \"gcd\", \"getCursorDown\")\n    f = sG(f, \"abr\", \"addBoxRounded\")\n    f = sG(f, \"az\", \"addText\")\n    f = sG(f, \"sb\", \"Shape_Bezier\")\n    f = sG(f, \"sn\", \"setNextFillColor\")\n    f = sG(f, \"sw\", \"setDefaultStrokeWidth\")\n    f = sG(f, \"sf\", \"setDefaultFillColor\")\n    f = sG(f, \"sr\", \"setDefaultStrokeColor\")\n    f = sG(f, \"bz\", \"addBezier\")\n    f = sG(f, \"ae\", \"addCircle\")\n    f = sG(f, \"rn\", \"return\")\n    f = sG(f, \"fu\", \"function\")\n    return f\nend\n\n--YES left eye on MY left, and right eye on MY right\nLx, LEx = 23, 9 --left eye main x, left eye center x\nLy, LEy = 30, 9\nRx, REx = 59, 9\nRy, REy = 30, 9\n\nsize = screen.getBoundingBoxSize()\nposLE = {size[1]*((50-Lx-LEx)/100),0,size[3]*((49-Ly)/100)}\nposRE = {size[1]*((50-Rx-REx)/100),0,size[3]*((49-Ry)/100)}\n\nSC1 = [[\n\nlD = createLayer()\nl = createLayer()\nrx, ry = getResolution()\nf = loadFont(\"Play\", 45)\nnx = rx/100\nny = ry/100\n\nfu mysplit (s, sep)\nif sep == nil then\n    sep = \"%s\"\nend\nlocal t={}\nfor str in string.gmatch(s, \"([^\"..sep..\"]+)\") do\n    table.insert(t, str)\nend\nrn t\nend\n\ninput = getInput()\np = mysplit(input)\nif p[7] == nil then\n    p = {}\nend\n\nLx = nx*(p[1] or 23)\nLy = ny*(p[2] or 30)\nRx = nx*(p[3] or 59)\nRy = ny*(p[4] or 30)\ntL = nx*(p[5] or 0)\ntR = nx*(p[6] or 0)\ntP = nx*(p[7] or 0)\nr,g,b = p[8] or 0.710, p[9] or 0.878, p[10] or 0.941\ne = {}\nif p[11] ~= nil then\n    e = mysplit(p[11],',')\nelse\n    for i=1,38 do e[i]=0 end\nend\nfu l1(x)    rn Lx+x*nx  end\nfu l3(x,n)    rn Lx+(x+e[n])*nx    end\nfu l4(y,n)    rn Ly+(y+e[n])*ny    end\nfu r1(x)    rn Rx+x*nx    end\nfu r3(x,n)    rn Rx+(x+e[n])*nx    end\nfu r4(y,n)    rn Ry+(y+e[n])*ny    end\nfu m1(x,n)    rn (x+e[n])*nx    end\nfu m2(y,n)    rn (y+e[n])*ny    end\n\nsf(lD, Shape_Circle, 1,1,1, 1)\nae(lD,l1(9),Ly,100)--eyeFillL\nae(lD,r1(9),Ry,100)--eyeFillR\nsf(lD, Shape_Circle, r,g,b, 1)\n\nsr(l, sb, 0,0,0, 1)\nsw(l, sb,60)\n\n--eyelid2L\nbz(l,l3(-4,13),l4(-10,14),l3(11,15),l4(-37,16),l3(23,19),l4(-8,20))\nbz(l,l3(-3,13),l4(-2,14),l3(11,15),l4(-27,16),l3(21,19),l4(1,20))\nbz(l,l3(-3,13),l4(2,14),l3(9,17),l4(25,18),l3(21,19),l4(4,20))\nbz(l,l3(-4,13),l4(10,14),l3(9,17),l4(34,18),l3(23,19),l4(12,20))\n\n--eyelid2R\nbz(l,r3(-5,21),r4(-8,22),r3(9,23),r4(-37,24),r3(22,27),r4(-10,28))\nbz(l,r3(-3,21),r4(1,22),r3(8.5,23),r4(-27,24),r3(21,27),r4(-2,28))\nbz(l,r3(-3,21),r4(4,22),r3(7,25),r4(25,26),r3(21,27),r4(2,28))\nbz(l,r3(-5,21),r4(12,22),r3(7,25),r4(34,26),r3(22,27),r4(10,28))\n\nsr(l, sb, r,g,b, 1)\nsw(l, sb,9)\n\nbz(l,m1(41,29),m2(70,30),m1(50,31),m2(70,32),m1(59,35),m2(70,36))--mU\nbz(l,m1(41,29),m2(70,30),m1(50,33),m2(70,34),m1(59,35),m2(70,36))--mD\n\n--eyeL\nbz(l,l3(0,13),l4(0,14),l3(11,15),l4(-18,16),l3(18,19),l4(2,20))\nbz(l,l3(0,13),l4(0,14),l3(9,17),l4(16,18),l3(18,19),l4(2,20))\nae(lD,l1(9)-tL,Ly+tP,m1(4,37))\nsn(lD, 0,0,0, 1)\nae(lD,l1(9)-tL,Ly+tP,m1(3,37))\nsn(lD, 1,1,1, 1)\nae(lD,l1(7)-tL,Ly-ny*3+tP,m1(2,37)/2)\n\n--eyeR\nbz(l,r3(0,21),r4(2,22),r3(7,23),r4(-18,24),r3(18,27),r4(0,28))\nbz(l,r3(0,21),r4(2,22),r3(9,25),r4(16,26),r3(18,27),r4(0,28))\nae(lD,r1(9)-tR,Ry+tP,m1(4,38))\nsn(lD, 0,0,0, 1)\nae(lD,r1(9)-tR,Ry+tP,m1(3,38))\nsn(lD, 1,1,1, 1)\nae(lD,r1(7)-tR,Ry-ny*3+tP,m1(2,38)/2)\n\nsr(l, sb, r,g,b, 1)\nsw(l, sb,13)\nbz(l,l3(0,1),l4(-9,2),l3(10,3),l4(-17,4),l3(18,5),l4(-9,6))--browL\nbz(l,r3(0,7),r4(-9,8),r3(8,9),r4(-17,10),r3(18,11),r4(-9,12))--browR\n\n]]\nscript = decompress(SC1)\nscreen.setRenderScript(script)\n\nfRSC=[[\nfR = {}\nif p[12] ~= nil then\n    fR = mysplit(p[12],',')\nelse\n    for i=1,5 do fR[i]=0 end\nend\nsn(l,1,0,0,1)\nae(l,nx*6,ny*87,nx*2)\naz(l,f,\"- x +\",nx*10,ny*89)\nsn(l,0,1,0,1)\nae(l,nx*6,ny*95,nx*2)\naz(l,f,\"- y +\",nx*10,ny*97)\nsn(l,fR[1],fR[2],fR[3],1)\nae(l,nx*fR[4],ny*fR[5],nx*1)\n\n]]\nfRS = decompress(fRSC)\n\nSC2 = [[\nl = createLayer()\nl2 = createLayer()\nrx, ry = getResolution()\nf = loadFont(\"Play\", 30)\nnx = rx/100\nny = ry/100\ntrh = 5.7 -- text row height\ncx,cy = getCursor()\n\nfu mysplit (inputstr, sep)\n   if sep == nil then\n      sep = \"%s\"\n   end\n   local t={}\n   for str in string.gmatch(inputstr, \"([^\"..sep..\"]+)\") do\n      table.insert(t, str)\n   end\n   rn t\nend\n\ninput = getInput()\np = mysplit(input,\"@@\")\nif p[2] == nil then\n    p = {}\nend\nr,g,b =  p[1] or 0.710, p[2] or 0.878, p[3] or 0.941\nr2,g2,b2 =  p[4] or 0.710, p[5] or 0.878, p[6] or 0.941\nans = p[7] or \"\"\nvariantNow =  tonumber(p[8]) or 1\ntxtV = {\"\"}\nif p[9]~= nil then\n    for n, pN in ipairs(p) do\n        if n > 8 and p[n]~= nil then\n            txtV[n -8] = p[n]\n        end\n    end\nend\n\nfu lineWrapping(txt,mL,widthLim,num)\n    local sx = 0\n    local txtN = {}\n    local i=1\n    if num ~= nil then\n        txtN[i] = num..\". \"\n    end\n    for c in string.gmatch(txt,\"([^\\n]+)\") do\n        if i == mL+1 then\n            txtN[i -1] = txtN[i -1]..\"...\"\n            break\n        end\n        if txtN[i] == nil then\n            txtN[i] = \"\"\n        end\n        sx,_ = getTextBounds(f,txtN[i]..c)\n        sx = sx/nx\n        if sx > widthLim then\n            for w in string.gmatch(c,\"([^%s]+)\") do\n                if txtN[i] == nil then\n                    txtN[i] = \"\"\n                end\n                sx,_ = getTextBounds(f,txtN[i]..w)\n                sx = sx/nx\n                if sx > widthLim then\n                    sx,_ = getTextBounds(f,w)\n                    sx = sx/nx\n                    if sx > widthLim then\n                        for w1 in string.gmatch(w,\".\") do\n                            if txtN[i] == nil then\n                                txtN[i] = \"\"\n                            end\n                            txtN[i] = txtN[i]..w1\n                            sx,_ = getTextBounds(f,txtN[i])\n                            sx = sx/nx\n                            if sx > widthLim then\n                                i = i+1\n                                if i == mL+1 then\n                                    txtN[i -1] = txtN[i -1]..\"...\"\n                                    break\n                                end\n                            end\n                        end\n                        if i == mL+1 then\n                            break\n                        end\n                        txtN[i] = txtN[i]..' '\n                        \n                        else\n                        i = i+1\n                        if i == mL+1 then\n                            txtN[i -1] = txtN[i -1]..\"...\"\n                            break\n                        end\n                        if txtN[i] == nil then\n                            txtN[i] = \"\"\n                        end\n                        txtN[i] = txtN[i]..w..' '\n                    end\n                    \n                    else\n                    txtN[i] = txtN[i]..w..' '\n                end\n            end\n            \n        else\n            txtN[i] = txtN[i]..c..' '\n        end\n        i = i+1\n    end\n    rn txtN\nend\n\nsf(l,Shape_Text,r2,g2,b2, 1)\n\nsetNextShadow(l,nx*4,0.12,0.12,0.12, 1)\nsn(l,0.03,0.03,0.03, 1)\nabr(l,nx*3,ny*4,nx*94,ny*36,nx*3)\n\ntxtN = lineWrapping(ans,6,87)\nnyN=3.3\nfor n, textN in ipairs(txtN) do\n    nyN=nyN+trh\n    az(l,f,txtN[n],nx*5,ny*nyN)\nend\n\nfu checkInBox(x,y,sx,sy,cx,cy)\n    if x <= cx and y <= cy and cx <= x+sx and cy <= y+sy then\n        rn true\n    end\n    rn false\nend\n\n\nsf(l,Shape_Polygon, r,g,b, 1)\nsr(l,Shape_BoxRounded,r,g,b, 1)\nsetNextStrokeWidth(l,nx*0.5)\nsn(l,r/10,g/10,b/10, 1)\nabr(l,nx*3,ny*45,nx*94,ny*52,nx*3)\n\nsn(l,0.01,0.01,0.01, 1)\nabr(l,nx*92,ny*48,nx*2.5,ny*46,0)\nsn(l,r,g,b, 1)\nlocal scrollH = 46/#txtV\nabr(l,nx*92,ny*(48+(scrollH*(variantNow -1))),nx*2.5,ny*(scrollH),0)\nif gcd() then\n    for i=1, #txtV do\n        if checkInBox(nx*92,ny*(48+(scrollH*(i -1))),nx*2.5,ny*(scrollH),cx,cy) then\n            setOutput(\"s \"..i)\n        end\n    end\nend\n\nsetDefaultShadow(l,Shape_BoxRounded,nx*1.5,0.3,0.3,0.3, 0.4)\nsf(l,Shape_BoxRounded, 0.05,0.05,0.05, 1)\n\nlocal nextY = 48\nfor n, textN in ipairs(txtV) do\n    if n+1 == variantNow or n >= variantNow then\n        if n == variantNow then\n            sn(l,r/8,g/8,b/8, 1)\n            local txtN = lineWrapping(txtV[n],5,66,n)\n            local ly = trh* #txtN\n            abr(l,nx*20,ny*nextY,nx*70,ny*(6.5+ly-trh),0)\n            if gcd() and checkInBox(nx*20,ny*nextY,nx*70,ny*(6.5+ly-trh),cx,cy) then\n                setOutput(\"v \"..n)\n            end\n            for ni=1, #txtN do\n                az(l,f,txtN[ni],nx*20.8,ny*(nextY+5+(trh*(ni -1))))\n            end\n            nextY = nextY +2 +ly\n            \n            else\n            local txtN = lineWrapping(txtV[n],1,66,n)\n            abr(l,nx*20,ny*nextY,nx*70,ny*6.5,0)\n            if gcd() and checkInBox(nx*20,ny*nextY,nx*70,ny*6.5,cx,cy) then\n                setOutput(\"v \"..n)\n            end\n            az(l,f,txtN[1]or\"\",nx*20.8,ny*(nextY+5))\n            nextY = nextY + trh +2\n        end\n    end\n    if nextY > 100 then\n        break\n    end\nend\n \nsw(l,Shape_BoxRounded, nx*0.5)\nsetDefaultShadow(l,Shape_BoxRounded,0,0,0,0, 0)\n\nsf(l,Shape_BoxRounded,r,g,b, 0.01)\nif gcd() and checkInBox(nx*6,ny*48,nx*11,ny*12.5,cx,cy) then\n    sn(l,r,g,b, 0.25)\n    setOutput(\"up\")\nend\nabr(l,nx*6,ny*48,nx*11,ny*12.5,nx*0.4)\naddTriangle(l,nx*8,ny*57.5,nx*11.5,ny*50,nx*15,ny*57.5)\n\nif gcd() and checkInBox(nx*6,ny*64.5,nx*11,ny*12.5,cx,cy) then\n    sn(l,r,g,b, 0.25)\n    setOutput(\"down\")\nend\nabr(l,nx*6,ny*64.5,nx*11,ny*12.5,nx*0.4)\naddTriangle(l,nx*8,ny*67.5,nx*11.5,ny*74.4,nx*15,ny*67.5)\n\nif gcd() and checkInBox(nx*6,ny*81.5,nx*11,ny*12.5,cx,cy) then\n    sn(l,r,g,b, 0.25)\n    setOutput(\"enter\")\nend\nabr(l,nx*6,ny*81.5,nx*11,ny*12.5,nx*0.4)\nsn(l,r,g,b, 1)\naz(l,f,\"ENTER\",nx*7,ny*88)\n\nsn(l2,r/10,g/10,b/10, 1)\naddBox(l2,nx*8,ny*95,nx*85,ny*1.8)\nsn(l2,r,g,b, 1)\naddBox(l2,nx*8,ny*97,nx*85,ny*1.2)\nsn(l2,0,0,0, 1)\naddBox(l2,nx*8,ny*98,nx*85,ny*4)\n\n]]\nscript2 = decompress(SC2)\nif useMenuScreen then\n    screen2.setRenderScript(script2)\nend\n\n-- gitlab.com/JayleBreak/dualuniverse/-/blob/master/DUflightfiles/autoconf/custom/planetref.lua\nlocal atlas = require(\"atlas\")\npPatt = '::pos{'..nPt..','..nPt..','..nPt..','..nPt..','..nPt..'}'\n-- convert To World Coordinates\nfunction cToWC(O)\n    local d2r = math.pi/180\n    local sId, bId, la, lo, alt = string.match(O, pPatt)\n    sId, bId, la, lo, alt = tN(sId), tN(bId), tN(la), tN(lo), tN(alt)\n    if bId == 0 then\n        return vec3(la,lo,alt)\n    end\n    la = d2r*utils.clamp(la, -90, 90)\n    lo = d2r*(lo % 360)\n    \n    local xproj = math.cos(la)\n    local p = atlas[0][bId]\n    return vec3(p.center) + (p.radius + alt) * vec3(xproj*math.cos(lo),\n                xproj*math.sin(lo),\n                math.sin(la))\nend\n\nfunction ur(n)\n    return utils.round(n,0.001)\nend\n\n--simple string of vec3 or tablet 3 elem\nfunction toStr(sp)\n    if type(sp) == 'table' then\n        if sp[\"x\"] and sp[\"y\"] and sp[\"z\"] then\n            return ur(sp[\"x\"])..\" \"..ur(sp[\"y\"])..\" \"..ur(sp[\"z\"])\n        end\n        return ur(sp[1])..\" \"..ur(sp[2])..\" \"..ur(sp[3])\n    end\n    return \"need tablet, have: \"..type(sp)\nend\n\n--create ::pos{} string in world coords\nfunction getPosStr(wp)\n    if wp[1] and wp[2] and wp[3] then\n        return \"::pos{0,0,\"..wp[1]..\",\"..wp[2]..\",\"..wp[3]..\"}\"\n    end\n    return \"::pos{0,0,\"..wp[\"x\"]..\",\"..wp[\"y\"]..\",\"..wp[\"z\"]..\"}\"\nend\n\n-- my equivalent of not existed function \"element.getWorldPosition()\"\nfunction elementWorldPosition(slot)\n    if slot.load() == 1 then\n        local s = slot.getPosition()\n        local wp = construct.getWorldPosition()\n        local w1 = construct.getWorldRight()\n        local w2 = construct.getWorldForward()\n        local w3 = construct.getWorldUp()\n        return {wp[1]+s[1]*w1[1]+s[2]*w2[1]+s[3]*w3[1],\n                wp[2]+s[1]*w1[2]+s[2]*w2[2]+s[3]*w3[2],\n                wp[3]+s[1]*w1[3]+s[2]*w2[3]+s[3]*w3[3]}\n    end\n    return vec3()\nend\n\n-- go deeper, getWorldPosition of eye on monitor!\"\n-- requaire position of dot on monitor in percent of monitors size, from centre\nfunction eyeWorldPosition(slot,offset)\n    if slot.load() == 1 then\n        local s = offset\n        local wp = elementWorldPosition(slot)\n        local w1 = slot.getWorldRight()\n        local w2 = slot.getWorldForward()\n        local w3 = slot.getWorldUp()\n        return {wp[1]+s[1]*w1[1]+s[2]*w2[1]+s[3]*w3[1],\n                wp[2]+s[1]*w1[2]+s[2]*w2[2]+s[3]*w3[2],\n                wp[3]+s[1]*w1[3]+s[2]*w2[3]+s[3]*w3[3]}\n    end\n    return vec3()\nend","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"1"},{"code":"local t = system.getArkTime()\n\nif screen.load() == 1 then\n    if lALen > 0 then\n        lookRefresh()\n    else\n        if lTarget == \"player\" then\n            setLook(vec3(player.getWorldHeadPosition()))\n        else\n            if lTarget ~= \"manual\" and cSelfWas ~= construct.getWorldPosition() then\n                cSelfWas = construct.getWorldPosition()\n                setLook(getDegrees(lNext[1]))\n            end\n        end\n    end\n    if aLen > 0 then\n        animRefresh()\n    else\n        if #aSeq ~= 0 then\n            animSequence()\n        elseif idle then\n            if t > iT[1] then\n                iT[1] = t + math.random(2,7)\n                animSequence(\"blink\")\n            elseif t > iT[2] then\n                iT[2] = t + math.random(15,30)\n                iT[3] = t + 1\n                iT[1] = iT[1] + 1\n                lookAt(\"0.3,-70,70,45\")\n                setAnim(\"0.2,U\" )\n            elseif t > iT[3] then\n                lookAt(\"0.3,player\")\n                setAnim(\"0.2,Default\")\n            end\n        end\n    end\n    input = Lx..\" \"..Ly..\" \"..Rx..\" \"..Ry..\" \"..tL..\" \"..tR..\" \"..tP\n    input = input..\" \"..cF[1]..\" \"..cF[2]..\" \"..cF[3]..\" \"..fE..\" \"..fR\n    screen.setScriptInput(input)\n    --system.print(input)\nend\n\nif mO ~= \"\" and useMenuScreen then\n    if t > trigTime then\n        trigTime = t +0.2\n        if mO == \"up\" then\n            scroll(-1)\n        end\n        if mO == \"down\" then\n            scroll(1)\n        end\n        if mO:find('s ') then\n            local sp = mysplit(mO,' ')\n            variantNow = tonumber(sp[2])\n        end\n        if mO:find('v ') then\n            local sp = mysplit(mO,' ')\n            variantNow = tonumber(sp[2])\n            pressEnter()\n        end\n        if mO == \"enter\" then\n            pressEnter()\n        end\n        getInput()\n    end\n    mO = \"\"\nend\n\nms = db.getStringValue(\"ms\")\nif ms ~= \"\" then\n    if ms == \"hI\" then\n        db.setStringValue(\"ms\",\"mO\")\n    end\n    if ms == \"hO\" then\n        db.setStringValue(\"ms\",\"\")\n        hO = db.getStringValue(\"hO\")\n        variantNow = tonumber(hO)\n        pressEnter()\n        getInput()\n    end\nend","filter":{"args":[{"value":"t"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"2"},{"code":"variants = {{1,'',{''},{1}}}\ntxtVariants = {''}\nvariantsNeed = {1}\nvariantNow = 1\nanswerText = \"-unit.exit-\"\ngetInput()","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"3"},{"code":"local vT = ''\nsystem.print(text)\nif fNameIState then\n    if text:find(\"%A\") then\n        if string.gsub(text, \"%a\", \"\"):find(\"%D\") then\n            text, vT ='',\"-invalid name-\"\n            system.print(vT)\n        end\n    end\n    fNameI = text\n    refreshAnswer(\"fSL\",\"\\n\"..vT)\nend","filter":{"args":[{"variable":"*"}],"signature":"onInputText(text)","slotKey":"-4"},"key":"4"},{"code":"--lookAt(\"0.3,-70,70,45\")","filter":{"args":[{"value":"option1"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"5"},{"code":"--lookAt(\"0.3,::pos{0,2,42.7830,111.2410,96.9404}\")","filter":{"args":[{"value":"option2"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"6"},{"code":"--lookAt(\"0.3,player\")","filter":{"args":[{"value":"option3"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"7"},{"code":"--lookAt(\"0.3,vec3{100,100,100}\")","filter":{"args":[{"value":"option4"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"8"}],"methods":[],"events":[]}
