{"slots":{"0":{"name":"screen_face","type":{"events":[],"methods":[]}},"1":{"name":"screen_menu","type":{"events":[],"methods":[]}},"2":{"name":"databank","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"menuOutput = screen2.getScriptOutput()","filter":{"args":[{"variable":"*"}],"signature":"onOutputChanged(output)","slotKey":"1"},"key":"0"},{"code":"-- Project BotMind by StarZet (PART_MIND) (PART_FACE) (PART_SCREEN_LUA)\n-- Bring more life in Dual Universe!\n\nunit.setTimer(\"t\",0.02)-- 50 per sec\nunit.hideWidget()\n\nfunction mysplit(inputstr, sep)\n   if sep == nil then\n      sep = \"%s\"\n   end\n   local t={}\n   for str in string.gmatch(inputstr, \"([^\"..sep..\"]+)\") do\n      table.insert(t, str)\n   end\n   return t\nend\n\nerrorM = \"\"\nuseMenuScreen = true --export:Turn it off if you want to use only HUD for interact.\nscreen = screen_face\nif not screen.getClass():find(\"ScreenUnit\")then\n    errorM = \"need screen_face, have: \"..screen.getClass()..\"; \"\nend\nscreen2 = screen_menu\nif useMenuScreen then\n    if not screen2.getClass():find(\"ScreenUnit\") then\n        errorM = errorM..\"need screen_menu, have: \"..screen2.getClass()..\"; \"\n    end\nend\ndb = databank\nif not db.getClass():find(\"DataBankUnit\")then\n    errorM = errorM..\"need databank, have: \"..screen2.getClass()..\"; \"\nend\n\nfaceStrokeColour = \"0.710,0.878,0.941\" --export:As one String, values from 0 to 1 in format \"r,g,b\" default is \"0.710,0.878,0.941\"\ncF = mysplit(faceStrokeColour,\",\")\nif type(tonumber(cF[1]))==\"number\"\n    and type(tonumber(cF[2]))==\"number\"\n    and type(tonumber(cF[3]))==\"number\" then\n    else\n    errorM = errorM..\"faceStrokeColour wrong format; \"\nend\ncolorMain = \"0.710,0.878,0.941\" --export:As one String, values from 0 to 1 in format \"r,g,b\" default is \"0.710,0.878,0.941\"\ncM = mysplit(colorMain,\",\")\nif type(tonumber(cM[1]))==\"number\"\n    and type(tonumber(cM[2]))==\"number\"\n    and type(tonumber(cM[3]))==\"number\" then\n    else\n    errorM = errorM..\"colorMain wrong format; \"\nend\ntextColor = \"0.710,0.878,0.941\" --export:As one String, values from 0 to 1 in format \"r,g,b\" default is \"0.710,0.878,0.941\"\ncT = mysplit(textColor,\",\")\nif type(tonumber(cT[1]))==\"number\"\n    and type(tonumber(cT[2]))==\"number\"\n    and type(tonumber(cT[3]))==\"number\" then\n    else\n    errorM = errorM..\"textColor wrong format; \"\nend\nif errorM ~= \"\" then\n    system.print(errorM)\n    unit.exit()\nend\n\n\ninput = \"\"\nvariants = {{1,'',{''},{1}}}\ntxtVariants = {''}\n\n-- params on first launch\nvariantsNeed = {1,2,3,4}\nvariantNow = 1\nanswerText = \"Hello world!\\nI have HUD, just manually activate the second program board.\"\n\n-- The actual mind, it's a table of variants, each of them have some parts\n--    variants = { {id,string,{string,string,...},{id,id,...}},\n--                 nextVariant,\n--                 ... }\n--    Each variant:\n--    [1] Id of the variant (can be a string)\n--    [2] Text of your speach in console\n--    [3] tablet of Reactions when press Enter,\n--        all reactions happend in pressEnter() function\n--        reaction is \"trigger_parammeter\" example = \"answer_Hi\"\n--        (yes you need create that triggers function and add a new \"if\" in pressEnter())\n--    [4] tablet of the next visible variants (next Ids) sorted as it is\nvariants = {\n    {1,\"Who are you?\",\n        {\"vNext_1\",\"answer_I\\'m bot, or NPC system.\"},\n        {1,2,3,4}},\n    {2,\"What you can do?\",\n        {\"vNext_2\",\"answer_I can do many things, limited only by game programming abilities.\"},\n        {1,2,3,4}},\n    {3,\"Who was create you?\",\n        {\"vNext_3\",\"answer_I\\'m created by StarZet, more info on github.com/Star-Zet/bot-mind\"},\n        {1,2,3,4}},\n    {4,\"-Exit-\",\n        {\"exit\"},\n        {1}}\n}\n\nfor n,varN in ipairs(variantsNeed) do\n    txtVariants[n] = variants[varN][2]\nend\n\nmenuOutput = \"start\"\ntrigTime = 0\n\nfunction getInput()\n    inputColors = cM[1]..\"@@\"..cM[2]..\"@@\"..cM[3]..\"@@\"..cT[1]..\"@@\"..cT[2]..\"@@\"..cT[3]\n    if answerText == \"\" then\n        answerText = \" \"\n    end\n    input = inputColors ..\"@@\".. answerText..\"@@\".. variantNow\n    for _,textN in ipairs(txtVariants) do\n        if textN == \"\" then\n            textN = \" \"\n        end\n        input = input..\"@@\".. textN\n    end\n    db.setStringValue(\"input\",input)\n    if useMenuScreen then\n        screen2.setScriptInput(input)\n    end\n    databank.setStringValue(\"message\",\"mindOutput\")\nend\n\nfunction pressEnter()\n    local variantNext = 1\n    local r = variants[variantsNeed[variantNow]][3] -- reactions\n    for n,rN in ipairs(r) do\n        local sp = mysplit(rN,\"_\")\n        if sp[1] == \"answer\" then answerText = sp[2] end\n        if sp[1] == \"exit\" then unit.exit() end\n        if sp[1] == \"vNext\" then variantNext = tonumber(sp[2]) end\n    end\n    variantsNeed = variants[variantsNeed[variantNow]][4]\n    txtVariants = {}\n    for n,varN in ipairs(variantsNeed) do\n        txtVariants[n] = variants[varN][2]\n    end\n    variantNow = variantNext\n    scroll(0)\nend\n\nfunction scroll(dir)\n    if dir < 0 then\n        if variantNow > 1 then\n            variantNow = variantNow - 1\n        end\n    end\n    if dir > 0 then\n        if variantNow < #variantsNeed then\n            variantNow = variantNow + 1\n        end\n    end\nend\n\n\n--YES left eye on MY left, and right eye on MY right\nLx, LEx = 22, 9 --left eye main x, left eye center x\nLy, LEy = 30, 9\nRx, REx = 58, 9\nRy, REy = 30, 9\n\n\nsize = screen.getBoundingBoxSize()\nposLE = {size[1]*((50-Lx-LEx)/100),0,size[3]*((49-Ly)/100)}\nposRE = {size[1]*((50-Rx-REx)/100),0,size[3]*((49-Ry)/100)}\n\nscript = [[\n\nlocal layerD = createLayer()\nlocal layer = createLayer()\nlocal rx, ry = getResolution()\nlocal font = loadFont(\"Play\", 20)\nlocal font2 = loadFont(\"Play\", 80)\nlocal nx = rx/100\nlocal ny = ry/100\n\nsetDefaultFillColor(layerD, Shape_Circle, 1,1,1, 1)\nsetDefaultStrokeWidth(layer, Shape_Bezier,9)\n\nfunction mysplit (inputstr, sep)\n   if sep == nil then\n      sep = \"%s\"\n   end\n   local t={}\n   for str in string.gmatch(inputstr, \"([^\"..sep..\"]+)\") do\n      table.insert(t, str)\n   end\n   return t\nend\n\ninput = getInput()\nparams = mysplit(input)\nif params[7] == nil then\n    params = {}\nend\n\n\nLx = nx*(params[1] or 22)\nLy = ny*(params[2] or 30)\nRx = nx*(params[3] or 58)\nRy = ny*(params[4] or 30)\nturnL = nx*(params[5] or 0)\nturnR = nx*(params[6] or 0)\nturnP = nx*(params[7] or 0)\nr,g,b = params[8] or 0.710, params[9] or 0.878, params[10] or 0.941\n\nsetDefaultStrokeColor(layer, Shape_Bezier, r,g,b, 1)\n\naddBezier(layer,nx*41,ny*65,nx*50,ny*77,nx*59,ny*65)--mouthUp\naddBezier(layer,nx*41,ny*65,nx*50,ny*77,nx*59,ny*65)--mouthDown\n\naddCircle(layerD,Lx+nx*4,Ly,35)--eyeFillL\naddCircle(layerD,Lx+nx*9,Ly,55)--eyeFillL\naddCircle(layerD,Lx+nx*14,Ly,45)--eyeFillL\naddCircle(layerD,Rx+nx*5,Ry,46)--eyeFillR\naddCircle(layerD,Rx+nx*9,Ry,55)--eyeFillR\naddCircle(layerD,Rx+nx*14,Ry,35)--eyeFillR\nsetDefaultFillColor(layerD, Shape_Circle, 0.710,0.878,0.941, 1)\n\n\naddBezier(layer,Lx,Ly,Lx+nx*11,Ly-ny*18,Lx+nx*18,Ly+ny*2)--eyelidUpL\naddBezier(layer,Lx,Ly,Lx+nx*9,Ly+ny*16,Lx+nx*18,Ly+ny*2)--eyelidDownL\naddCircle(layerD,Lx+nx*9-turnL,Ly+turnP,40)--eyeBackL\nsetNextFillColor(layerD, 0,0,0, 1)--black\naddCircle(layerD,Lx+nx*9-turnL,Ly+turnP,30)--eyeFrontL\nsetNextFillColor(layerD, 1,1,1, 1)--white\naddCircle(layerD,Lx+nx*7-turnL,Ly-ny*3+turnP,9)--eyeReflectionL\n\n\naddBezier(layer,Rx,Ry+ny*2,Rx+nx*7,Ry-ny*18,Rx+nx*18,Ry)--eyelidUpR\naddBezier(layer,Rx,Ry+ny*2,Rx+nx*9,Ry+ny*16,Rx+nx*18,Ry)--eyelidDownR\naddCircle(layerD,Rx+nx*9-turnR,Ry+turnP,40)--eyeBackR\nsetNextFillColor(layerD, 0,0,0, 1)--black\naddCircle(layerD,Rx+nx*9-turnR,Ry+turnP,30)--eyeFrontR\nsetNextFillColor(layerD, 1,1,1, 1)--white\naddCircle(layerD,Rx+nx*7-turnR,Ry-ny*3+turnP,9)--eyeReflectionR\n\nsetDefaultStrokeColor(layer, Shape_Bezier, 0,0,0, 1)\nsetDefaultStrokeWidth(layer, Shape_Bezier,18)\naddBezier(layer,Lx-nx*2,Ly,Lx+nx*11.2,Ly-ny*23,Lx+nx*19.75,Ly+ny*2.3)--eyelidUp2L\naddBezier(layer,Lx-nx*2,Ly,Lx+nx*9.3,Ly+ny*21,Lx+nx*20,Ly+ny*1.8)--eyelidDown2L\naddBezier(layer,Rx-nx*1.8,Ry+ny*2.2,Rx+nx*7,Ry-ny*23,Rx+nx*20,Ry+ny*0.1)--eyelidUp2R\naddBezier(layer,Rx-nx*2,Ry+ny*2,Rx+nx*9,Ry+ny*21,Rx+nx*20,Ry-ny*0.2)--eyelidDown2R\nsetDefaultStrokeColor(layer, Shape_Bezier, r,g,b, 1)\nsetNextStrokeWidth(layer, 13)--brow Width\naddBezier(layer,Lx +nx*0,Ly -ny*9,Lx+nx*10,Ly-ny*17,Lx+nx*18,Ly -ny*9)--eyebrowL\nsetNextStrokeWidth(layer, 13)--brow Width\naddBezier(layer,Rx,Ry -ny*9,Rx+nx*9,Ry-ny*17,Rx+nx*18,Ry -ny*9)--eyebrowR\n\n\n]]\nscreen.setRenderScript(script)\n\nscript2 = [[\nlocal l = createLayer()\nlocal l2 = createLayer()\nlocal rx, ry = getResolution()\nlocal f = loadFont(\"Play\", 30)\nlocal nx = rx/100\nlocal ny = ry/100\nlocal trh = 5.7 -- text row height in percents of screen height\nlocal cx,cy = getCursor()\n\nfunction mysplit (inputstr, sep)\n   if sep == nil then\n      sep = \"%s\"\n   end\n   local t={}\n   for str in string.gmatch(inputstr, \"([^\"..sep..\"]+)\") do\n      table.insert(t, str)\n   end\n   return t\nend\n\ninput = getInput()\nparams = mysplit(input,\"@@\")\nif params[2] == nil then\n    params = {}\nend\nr,g,b =  params[1] or 0.710, params[2] or 0.878, params[3] or 0.941\nr2,g2,b2 =  params[4] or 0.710, params[5] or 0.878, params[6] or 0.941\nanswer = params[7] or \"\"\nvariantNow =  tonumber(params[8]) or 1\ntxtVariants = {\"\"}\nif params[9]~= nil then\n    for n, paramN in ipairs(params) do\n        if n > 8 and params[n]~= nil then\n            txtVariants[n -8] = params[n]\n        end\n    end\nend\n\nfunction lineWrapping(txt,maxLines,widthLim,num)\n    local sx = 0\n    local txtN = {}\n    local i=1\n    if num ~= nil then\n        txtN[i] = num..\". \"\n    end\n    for c in string.gmatch(txt,\"([^\\n]+)\") do\n        if txtN[i] == nil then\n            txtN[i] = \"\"\n        end\n        sx,_ = getTextBounds(f,txtN[i]..c)\n        sx = sx/nx\n        if sx > widthLim then\n            for w in string.gmatch(c,\"([^%s]+)\") do\n                if txtN[i] == nil then\n                    txtN[i] = \"\"\n                end\n                sx,_ = getTextBounds(f,txtN[i]..w)\n                sx = sx/nx\n                if sx > widthLim then\n                    sx,_ = getTextBounds(f,w)\n                    sx = sx/nx\n                    if sx > widthLim then\n                        for w1 in string.gmatch(w,\".\") do\n                            if txtN[i] == nil then\n                                txtN[i] = \"\"\n                            end\n                            txtN[i] = txtN[i]..w1\n                            sx,_ = getTextBounds(f,txtN[i])\n                            sx = sx/nx\n                            if sx > widthLim then\n                                i = i+1\n                                if i == maxLines+1 then\n                                    txtN[i -1] = txtN[i -1]..\"...\"\n                                    break\n                                end\n                            end\n                        end\n                        if i == maxLines+1 then\n                            break\n                        end\n                        txtN[i] = txtN[i]..' '\n                        \n                        else\n                        i = i+1\n                        if i == maxLines+1 then\n                            txtN[i -1] = txtN[i -1]..\"...\"\n                            break\n                        end\n                        if txtN[i] == nil then\n                            txtN[i] = \"\"\n                        end\n                        txtN[i] = txtN[i]..w..' '\n                    end\n                    \n                    else\n                    txtN[i] = txtN[i]..w..' '\n                end\n            end\n            i = i+1\n            if i == maxLines+1 then\n                txtN[i -1] = txtN[i -1]..\"...\"\n                break\n            end\n        else\n            txtN[i] = txtN[i]..c..' '\n        end\n    end\n    return txtN\nend\n\nsetDefaultFillColor(l,Shape_Text,r2,g2,b2, 1)\n\nsetNextShadow(l,nx*4,0.12,0.12,0.12, 1)\nsetNextFillColor(l,0.03,0.03,0.03, 1)\naddBoxRounded(l,nx*3,ny*4,nx*94,ny*36,nx*3)\n\ntxtN = lineWrapping(answer,6,87)\nnyN=3.3\nfor n, textN in ipairs(txtN) do\n    nyN=nyN+trh\n    addText(l,f,txtN[n],nx*5,ny*nyN)\nend\n\nfunction checkInBox(x,y,sx,sy,cx,cy)\n    if x <= cx and y <= cy and cx <= x+sx and cy <= y+sy then\n        return true\n    end\n    return false\nend\n\n\nsetDefaultFillColor(l,Shape_Polygon, r,g,b, 1)\nsetDefaultStrokeColor(l,Shape_BoxRounded,r,g,b, 1)\nsetNextStrokeWidth(l,nx*0.5)\nsetNextFillColor(l,r/10,g/10,b/10, 1)\naddBoxRounded(l,nx*3,ny*45,nx*94,ny*52,nx*3)\n\nsetNextFillColor(l,0.01,0.01,0.01, 1)\naddBoxRounded(l,nx*92,ny*48,nx*2.5,ny*46,0)\nsetNextFillColor(l,r,g,b, 1)\nlocal scrollH = 46/#txtVariants\naddBoxRounded(l,nx*92,ny*(48+(scrollH*(variantNow -1))),nx*2.5,ny*(scrollH),0)\nif getCursorDown() then\n    for i=1, #txtVariants do\n        if checkInBox(nx*92,ny*(48+(scrollH*(i -1))),nx*2.5,ny*(scrollH),cx,cy) then\n            setOutput(\"s \"..i)\n        end\n    end\nend\n\nsetDefaultShadow(l,Shape_BoxRounded,nx*1.5,0.3,0.3,0.3, 0.4)\nsetDefaultFillColor(l,Shape_BoxRounded, 0.05,0.05,0.05, 1)\n\nlocal nextY = 48\nfor n, textN in ipairs(txtVariants) do\n    if n+1 == variantNow or n >= variantNow then\n        if n == variantNow then\n            setNextFillColor(l,r/8,g/8,b/8, 1)\n            local txtN = lineWrapping(txtVariants[n],5,66,n)\n            local ly = trh* #txtN\n            addBoxRounded(l,nx*20,ny*nextY,nx*70,ny*(6.5+ly-trh),0)\n            if getCursorDown() and checkInBox(nx*20,ny*nextY,nx*70,ny*(6.5+ly-trh),cx,cy) then\n                setOutput(\"v \"..n)\n            end\n            for ni=1, #txtN do\n                addText(l,f,txtN[ni],nx*20.8,ny*(nextY+5+(trh*(ni -1))))\n            end\n            nextY = nextY +2 +ly\n            \n            else\n            local txtN = lineWrapping(txtVariants[n],1,66,n)\n            addBoxRounded(l,nx*20,ny*nextY,nx*70,ny*6.5,0)\n            if getCursorDown() and checkInBox(nx*20,ny*nextY,nx*70,ny*6.5,cx,cy) then\n                setOutput(\"v \"..n)\n            end\n            addText(l,f,txtN[1]or\"\",nx*20.8,ny*(nextY+5))\n            nextY = nextY + trh +2\n        end\n    end\n    if nextY > 100 then\n        break\n    end\nend\n\nsetDefaultStrokeWidth(l,Shape_BoxRounded, nx*0.5)\nsetDefaultShadow(l,Shape_BoxRounded,0,0,0,0, 0)\n\nsetDefaultFillColor(l,Shape_BoxRounded,r,g,b, 0.01)\nif getCursorDown() and checkInBox(nx*6,ny*48,nx*11,ny*12.5,cx,cy) then\n    setNextFillColor(l,r,g,b, 0.25)\n    setOutput(\"up\")\nend\naddBoxRounded(l,nx*6,ny*48,nx*11,ny*12.5,nx*0.4)\naddTriangle(l,nx*8,ny*57.5,nx*11.5,ny*50,nx*15,ny*57.5)\n\nif getCursorDown() and checkInBox(nx*6,ny*64.5,nx*11,ny*12.5,cx,cy) then\n    setNextFillColor(l,r,g,b, 0.25)\n    setOutput(\"down\")\nend\naddBoxRounded(l,nx*6,ny*64.5,nx*11,ny*12.5,nx*0.4)\naddTriangle(l,nx*8,ny*67.5,nx*11.5,ny*74.4,nx*15,ny*67.5)\n\nif getCursorDown() and checkInBox(nx*6,ny*81.5,nx*11,ny*12.5,cx,cy) then\n    setNextFillColor(l,r,g,b, 0.25)\n    setOutput(\"enter\")\nend\naddBoxRounded(l,nx*6,ny*81.5,nx*11,ny*12.5,nx*0.4)\nsetNextFillColor(l,r,g,b, 1)\naddText(l,f,\"ENTER\",nx*7,ny*88)\n\nsetNextFillColor(l2,r/10,g/10,b/10, 1)\naddBox(l2,nx*8,ny*95,nx*85,ny*1.8)\nsetNextFillColor(l2,r,g,b, 1)\naddBox(l2,nx*8,ny*97,nx*85,ny*1.2)\nsetNextFillColor(l2,0,0,0, 1)\naddBox(l2,nx*8,ny*98,nx*85,ny*4)\n--addText(l, font2, params[1], 30, 70)\n--addText(l, font2, params[2], 30, 130)\n--addText(l, font2, params[3], 30, 190)\n--addText(l, font2, params[4], 30, 270)\n--addText(l, font2, params[5], 30, 330)\n--addText(l, font2, params[6], 30, 390)\n--addText(l, font2, params[7], 30, 470)\n--addText(l, font2, params[8], 30, 530)\n--addText(l, font2, params[9], 30, 590)\n]]\nif useMenuScreen then\n    screen2.setRenderScript(script2)\nend\n\nfunction ur(n)\n    return utils.round(n,0.001)\nend\n\n--simple string of vec3 or tablet 3 elem\nfunction toStr(sp)\n    if type(sp) == 'table' then\n        if sp[\"x\"] and sp[\"y\"] and sp[\"z\"] then\n            return ur(sp[\"x\"])..\" \"..ur(sp[\"y\"])..\" \"..ur(sp[\"z\"])\n        end\n        return ur(sp[1])..\" \"..ur(sp[2])..\" \"..ur(sp[3])\n    end\n    return \"need tablet, have: \"..type(sp)\nend\n\n--create ::pos{} string in world coords\nfunction getPosStr(wp)\n    if wp[1] and wp[2] and wp[3] then\n        return \"::pos{0,0,\"..wp[1]..\",\"..wp[2]..\",\"..wp[3]..\"}\"\n    end\n    return \"::pos{0,0,\"..wp[\"x\"]..\",\"..wp[\"y\"]..\",\"..wp[\"z\"]..\"}\"\nend\n\n-- my equivalent of not existed function \"element.getWorldPosition()\"\nfunction elementWorldPosition(slot)\n    if slot.load() == 1 then\n        local s = slot.getPosition()\n        local wp = construct.getWorldPosition()\n        local w1 = construct.getWorldRight()\n        local w2 = construct.getWorldForward()\n        local w3 = construct.getWorldUp()\n        return {wp[1]+s[1]*w1[1]+s[2]*w2[1]+s[3]*w3[1],\n                wp[2]+s[1]*w1[2]+s[2]*w2[2]+s[3]*w3[2],\n                wp[3]+s[1]*w1[3]+s[2]*w2[3]+s[3]*w3[3]}\n    end\n    return vec3()\nend\n\n-- go deeper, getWorldPosition of eye on monitor!\"\n-- requaire position of dot on monitor in percent of monitors size, from centre\nfunction eyeWorldPosition(slot,offset)\n    if slot.load() == 1 then\n        local s = offset\n        local wp = elementWorldPosition(slot)\n        local w1 = slot.getWorldRight()\n        local w2 = slot.getWorldForward()\n        local w3 = slot.getWorldUp()\n        return {wp[1]+s[1]*w1[1]+s[2]*w2[1]+s[3]*w3[1],\n                wp[2]+s[1]*w1[2]+s[2]*w2[2]+s[3]*w3[2],\n                wp[3]+s[1]*w1[3]+s[2]*w2[3]+s[3]*w3[3]}\n    end\n    return vec3()\nend\n\n-- devs function from \\Dual Universe\\data\\lua\\Helpers.lua\nfunction getRoll(gravityDirection, forward, right)\n    local horizontalRight = gravityDirection:cross(forward):normalize_inplace()\n    local roll = math.acos(utils.clamp(horizontalRight:dot(right), -1, 1)) * constants.rad2deg\n    if horizontalRight:cross(right):dot(forward) < 0 then roll = -roll end\n    return roll\nend","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"1"},{"code":"if screen.load() == 1 then\n    --local worldVertical = vec3(core.getWorldVertical()) -- along gravity\n    local elementUp = vec3(screen.getWorldUp())\n    local elementForward = vec3(screen.getWorldForward())\n    local elementRight = vec3(screen.getWorldRight())\n\n    cSelf = vec3(construct.getWorldPosition())\n    destTo = vec3(player.getWorldHeadPosition())\n\n    ewpL = vec3(eyeWorldPosition(screen,posLE))\n    ewpR = vec3(eyeWorldPosition(screen,posRE))\n    vDestToL = vec3(vec3(destTo) - ewpL):normalize_inplace()\n    vDestToR = vec3(vec3(destTo) - ewpR):normalize_inplace()\n    --lenBSelf = (vec3(destTo) - vec3(ewp)):len()\n\n    targetYawDegL = getRoll(vDestToL, elementUp, elementRight)\n    targetYawDegR = getRoll(vDestToR, elementUp, elementRight)\n    targetPitchDeg = getRoll(vDestToL, elementRight,-elementUp)--pitch degrees are identical\n    turnL = 4*math.sin(math.rad(targetYawDegL))\n    turnR = 4*math.sin(math.rad(targetYawDegR))\n    turnP = 2*math.sin(math.rad(targetPitchDeg))\n    --input = toStr(w1)..\" \"..toStr(w2)..\" \"..toStr(w3)\n    input = Lx..\" \"..Ly..\" \"..Rx..\" \"..Ry..\" \"..turnL..\" \"..turnR..\" \"..turnP..\" \"..cF[1]..\" \"..cF[2]..\" \"..cF[3]\n    --input = input..\" \"..targetYawDegL..\" \"..targetYawDegR..\" \"..targetPitchDeg\n\n    --posString = getPosStr(vec3(ewpL))\n    --posString = getPosStr(vec3(elementWorldPosition(screen)))\n    --system.setWaypoint(posString,false)\n    screen.setScriptInput(input)\nend\n\nif menuOutput ~= \"\" and useMenuScreen then\n    local t = system.getArkTime()\n    if t > trigTime then\n        trigTime = t +0.2\n        if menuOutput == \"up\" then\n            scroll(-1)\n        end\n        if menuOutput == \"down\" then\n            scroll(1)\n        end\n        if menuOutput:find('s ') then\n            local sp = mysplit(menuOutput,' ')\n            variantNow = tonumber(sp[2])\n        end\n        if menuOutput:find('v ') then\n            local sp = mysplit(menuOutput,' ')\n            if variantNow == tonumber(sp[2]) then\n                pressEnter()\n                else\n                variantNow = tonumber(sp[2])\n            end\n        end\n        if menuOutput == \"enter\" then\n            pressEnter()\n        end\n        getInput()\n        \n    end\n    menuOutput = \"\"\nend\n\nmessage = databank.getStringValue(\"message\")\nif message ~= \"\" then\n    if message == \"hudInput\" then\n        databank.setStringValue(\"message\",\"mindOutput\")\n    end\n    if message == \"hudOutput\" then\n        databank.setStringValue(\"message\",\"\")\n        hudOutput = databank.getStringValue(\"hudOutput\")\n        variantNow = tonumber(hudOutput)\n        pressEnter()\n        getInput()\n    end\nend","filter":{"args":[{"value":"t"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"2"},{"code":"variants = {{1,'',{''},{1}}}\ntxtVariants = {''}\nvariantsNeed = {1}\nvariantNow = 1\nanswerText = \"-unit.exit-\"\ngetInput()","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"3"}],"methods":[],"events":[]}
